#lang racket
(require loudhum)
(require 2htdp/image)

(define image (bitmap/file "song_hye_gyo_1.jpg"))
(define width (image-width image))
(define height (image-height image))
(define colors (list->vector (image->color-list image)))

(define average-pixels
  (lambda (pixels-list)
    (let ([avg (lambda (color1 color2)
                 (color (quotient (+ (color-red color1)
                                     (color-red color2)) 2)
                        (quotient (+ (color-green color1)
                                     (color-green color2)) 2)
                        (quotient (+ (color-blue color1)
                                     (color-blue color2)) 2)
                        (quotient (+ (color-alpha color1)
                                     (color-alpha color2)) 2)))])
      (reduce avg pixels-list))))

(define get-colors
  (lambda (indices)
    (map (section vector-ref colors <>) indices)))

(define reduce-row
  (lambda (n row-num)
    (let* ([hor-group-size (quotient width n)]
           [start-point (* row-num width)]
           [range1 (range (* width row-num)
                          (+ (* width row-num) n))]
           [grouped-pixels-2 (map (lambda (n)
                                    (range (+ start-point
                                              (* n hor-group-size))
                                           (+ start-point
                                              (* (add1 n) hor-group-size))))
                                  (range n))]
           [#|
            '((0 1 2) (3 4 5) (6 7 8) (9 10 11) (12 13 14) (15 16 17) (18 19 20)
            (21 22 23) (24 25 26) (27 28 29) (30 31 32) (33 34 35) (36 37 38)
            (39 40 41) (42 43 44) (45 46 47) (48 49 50) (51 52 53) (54 55 56)
            (57 58 59) (60 61 62) (63 64 65) (66 67 68) (69 70 71) (72 73 74)
            (75 76 77) (78 79 80) (81 82 83) (84 85 86) (87 88 89) (90 91 92)
            (93 94 95) (96 97 98))
            |#
            grouped-pixels (map (lambda (num)
                                  (range (* num hor-group-size)
                                         (+ hor-group-size
                                            (* num hor-group-size))))
                                range1)])
      (map (lambda (lst)
             (average-pixels
              (get-colors lst)))
           grouped-pixels-2))))

(define reduce-rows
  (lambda (n)
    (list->vector
     (map (section reduce-row n <>)
          (range height)))))

(define n-dots-per-row
  (lambda (n color-list)
    (when (or (> n (quotient width 2)) (> n (quotient height 2)))
      (error (string-append
              "numbers of dots per row must be smaller than or equal to "
              (number->string (min (quotient width 2) (quotient height 2))))))
    (let* ([hor-group-size (quotient width n)] 
           [num-dots-vert (quotient height hor-group-size)] 
           [reduced-rows-vec (reduce-rows n)]
           [grouped-rows (map
                          (lambda (num)
                            (range (* num hor-group-size)
                                   (+ hor-group-size (* num hor-group-size))))
                          (range num-dots-vert))]
           [combine-rows (lambda (row1 row2)
                           (let ([cast-list (lambda (val)
                                              (if (list? val)
                                                  val
                                                  (print "not list\n")
                                                  ))])
                             (map (lambda (color1 color2)
                                    (average-pixels (list color1 color2)))
                                  (cast-list row1) (cast-list row2))))]
           [combine-row-group (lambda (row-group)
                                (reduce
                                 combine-rows
                                 (map (section vector-ref reduced-rows-vec <>)
                                      row-group)))]
           [draw-row (lambda (row)
                       (reduce beside
                               (map (lambda (colr)
                                      (overlay
                                       (circle 5 'solid ;colr)
                                               (filter colr color-list))
                                       (circle 5.2 'solid (color 0 0 0 0))))
                                    row)))])
      (reduce above
              (map
               (section draw-row <>)
               (map
                (section combine-row-group <>)
                grouped-rows))))))

(define filter
  (lambda (colr color-list)
    (let ([colors color-list])
      (let kernel ([smallest-difference-so-far (* 3 255)]
                   [closest-so-far colr]
                   [remaining colors])
        (cond [(null? remaining)
               closest-so-far]
              [(= (color-alpha colr) 0)
               closest-so-far]
              [else
               (let* ([current (car remaining)]
                      [red-diff (abs (- (color-red colr)
                                        (color-red current)))]
                      [green-diff (abs (- (color-green colr)
                                          (color-green current)))]
                      [blue-diff (abs (- (color-blue colr)
                                         (color-blue current)))]
                      [diff-sum (+ red-diff green-diff blue-diff)])
                 (if (< diff-sum smallest-difference-so-far)
                     (kernel diff-sum
                             current
                             (cdr remaining))
                     (kernel smallest-difference-so-far
                             closest-so-far
                             (cdr remaining))))])))))

#|
(define color-list-1
  (list
   (color 0 0 0 255)
   (color 50 50 50 255)
   (color 100 100 100 255)
   (color 150 150 150 255)
   (color 200 200 200 255)
   (color 255 255 255 255)
   (color 255 0 0 255)
   (color 190 0 0 255)
   (color 220 0 0 255)
   (color 230 210 210 255)
   (color 250 230 230 255)
   (color 95 30 20 255)
   (color 125 30 20 255) 
   (color 135 80 100 255)
   (color 155 100 100 255)
   (color 155 90 90 255)
   (color 125 80 70 255)
   (color 145 135 110 255)
   (color 155 145 100 255)
   (color 50 150 120 255)
   (color 150 200 200 255)
   (color 0 100 100 255)
   (color 55 90 20 255)
   (color 0 0 90 255)
   (color 50 50 200 255)
   (color 150 150 200 255)
   (color 120 150 190 255)
   (color 130 155 175 225)
   (color 210 210 250 255)
   (color 230 250 255 255)
   (color 230 240 255 255)
   (color 100 150 250 255)
   (color 50 50 170 255)
   (color 150 150 250 255)
   (color 80 150 250 255)
   (color 10 150 250 255)
   (color 30 170 250 255)
   (color 60 200 250 255)
   (color 200 240 255 255)
   (color 230 200 255 255)
   (color 250 200 255 255)
   (color 255 200 220 255)
   (color 255 230 240 255)
   (color 250 210 230 255)
   (color 250 190 220 255)
   (color 250 150 200 255)
   (color 250 150 200 255)
   (color 250 150 200 255)
   (color 255 100 180 255)
   (color 255 110 170 255)
   (color 250 100 160 255)
   (color 250 100 150 255)
   ))|#

(define color-list-2
  (list
   (color 100 100 100 255)
   (color 150 150 150 255)
   (color 255 255 255 255)
   (color 150 150 200 255)
   (color 120 150 190 255)
   (color 130 155 175 225)
   (color 100 150 250 255)
   (color 150 150 250 255)
   (color 80 150 250 255)
   (color 10 150 250 255)
   (color 30 170 250 255)
   (color 60 200 250 255)
   (color 200 240 255 255)
   (color 255 240 250 255)
   (color 255 250 250 255)
   (color 250 150 200 255)
   (color 125 50 75 255)
   (color 60 25 40 255)
   ))

#|
(define color-list-3
  (list (color 255 255 255 255)
        (color 254 254 255 255)
        (color 255 254 254 255)
        (color 254 255 254 255)
        (color 250 250 255 255)
        (color 255 250 250 255)
        (color 250 255 250 255)
        (color 255 230 255 255)
        (color 230 0 0 255)
        (color 200 0 0 255)
        (color 255 50 50 255)
        (color 255 0 0 255)
        (color 255 100 50 255)
        (color 255 205 50 255)
        (color 255 205 180 255)
        (color 255 220 205 255)
        (color 255 155 180 255)
        (color 245 180 175 255)
        (color 255 240 230 255)
        (color 255 240 230 255)
        (color 205 255 50 255)
        (color 115 245 160 255)
        (color 50 255 205 255)
        (color 245 255 255 255)
        (color 180 230 255 255)
        (color 130 190 255 255)
        (color 50 190 255 255)
        (color 70 155 235 255)
        (color 0 130 255 255)
        (color 80 110 255 255)
        (color 55 75 255 255)
        (color 50 50 255 255)
        (color 100 50 255 255)
        (color 170 75 255 255)
        (color 110 40 140 255)
        (color 145 40 140 255)
        (color 215 30 110 255)
        (color 215 90 155 255)
        (color 210 115 155 255)
        (color 150 110 255 255)
        (color 75 55 130 255)
        (color 40 30 65 255)
        (color 0 0 0 255)
        ))|#

(define color-list-4
  (list
   (color 0 0 0 255)
   (color 255 255 255 255)
   (color 255 0 0 255)
   (color 250 110 110 255)
   (color 160 150 195 255)
   (color 130 90 140 255)
   (color 205 75 70 255)
   (color 175 75 75 255)
   (color 50 50 170 255)
   (color 150 150 200 255)
   (color 150 150 250 255)
   (color 100 150 250 255)
   (color 60 200 250 255)
   (color 230 240 255 255)
   (color 230 200 255 255)
   (color 250 200 255 255)
   (color 255 230 240 255)
   (color 250 210 230 255)
   (color 250 190 220 255)
   (color 250 150 200 255)
   (color 255 110 170 255)
   (color 200 125 165 255)
   ))

(define color-list-5
  (list (color 235 80 75 255) 
        (color 240 100 115 255) 
        (color 255 145 195 255) 
        (color 255 255 255 255) 
        ))

(define color-list-6 ; purples and pinks
  (list (color 65 0 255 255) 
        (color 130 0 255 255) 
        (color 190 0 255 255) 
        (color 255 0 255 255) 
        ))

(define color-list-7
  (list (color 55 35 0 255) ;dark brown
        (color 170 65 50 255) ;brown
        ;(color 175 130 75 255) ;tan
        (color 210 50 50 255) ;red
        (color 240 55 30 255) ;bright red
        (color 205 120 125 255) ;dusty rose
        (color 250 205 205 255) ;pink
        ;(color 205 185 185 255) ;dusty pink
        (color 250 225 225 255) ;light pink
        ;(color 255 255 255 255) ;white
        ))

(define color-list-8
  (list (color 135 70 100 255) ;purple
        (color 250 115 160 255) ;pink
        (color 205 120 125 255) ;dusty rose
        (color 255 255 255 255) ;white
        ;(color 160 230 160 255) ;green
        (color 240 210 45 255) ;yellow
        (color 230 175 50 255) ;gold
        ))

(define color-list-9
  (list
   (color 0 0 0 255) ;black
   (color 10 10 10 255) ;almost black
   (color 35 18 15 255) ;darkest brown
   (color 96 68 65 255) ;dark brown
   (color 105 15 10 255) ;darkest red
   (color 125 21 15 255) ;dark red
   (color 155 30 49 255) ;plum
   (color 139 93 80 255) ;cold brown
   (color 189 130 110 255) ;warm tan
   (color 180 128 111 255) ;same as above??
   (color 205 141 68 255) ;gold
   (color 255 255 85 255)
   (color 249 210 112 255)
   (color 249 210 168 255)
   (color 58 130 35 255)
   (color 175 215 70 255)
   (color 85 95 25 255)
   (color 22 59 75 255)
   (color 2 18 65 255)
   (color 215 155 135 255)
   (color 205 145 133 255)
   (color 225 175 165 255)
   (color 100 95 111 255)
   (color 198 182 171 255)
   (color 195 190 204 255)
   (color 229 195 230 255)
   (color 255 255 255 255)
   (color 200 200 200 255)
   (color 205 170 155 255)
   (color 255 245 245 255)
   (color 245 235 245 255)
   ))

(define color-list-10
  (list (color 50 50 50 255) ;black
        (color 84 66 41 255) ;dark brown
        (color 71 77 78 255) ;darkest green
        (color 96 94 84 255) ;dark green
        (color 127 108 82 255) ;dark tan
        (color 177 139 80 255) ;camel
        (color 216 183 126 255) ;latte
        (color 208 180 141 255) ;beige
        (color 253 239 191 255) ;cream
        (color 255 255 255 255) ;white
        (color 148 158 206 255) ;lavender
        (color 133 226 252 255) ;bright blue
        ))

(define color-list-11
  (list (color 255 245 245 255) ;light pink
        (color 255 229 95 255) ;yellow
        (color 255 250 215 255) ;white
        (color 143 224 249 255) ;blue
        ;(color 110 55 80 255) ;maroon?
        ;(color 130 130 150 255)
        (color 160 150 150 255) ;warm gray
        (color 175 180 180 255) ;gray-green
        (color 186 196 215 255) ;gray-blue
        (color 100 78 55 255) ;tan
        ))

(define color-test
  (lambda (color-list)
    (reduce (section above/align 'left <> <>)
            (map (lambda (colr)
                   (let ([red-text (string-append
                                    "R: "
                                    (number->string (color-red colr)))]
                         [green-text (string-append
                                      "G: "
                                      (number->string (color-green colr)))]
                         [blue-text (string-append
                                     "B: "
                                     (number->string (color-blue colr)))])
                     (beside (overlay/align
                              'center 'center
                              (circle 10 'solid colr)
                              (rectangle 21 21 'solid
                                         (color 255 255 255 255)))
                             (text (string-append "  "
                                                  red-text "   "
                                                  green-text "   "
                                                  blue-text)
                                   15 'black))))
                 color-list))))
